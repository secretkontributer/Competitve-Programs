
// ART
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢟⣵⣿⣿⣿⣷⣦⣝⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⠩⠑⣺⣿⣿⣦⣝⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⣁⠟⠛⠛⠻⠿⣿⣿⣦⡈⠩⣤⣤⣽⣏⣋⡉⠉⣠⣥⣴⣾⠿⠙⠋⠻⠿⣷⣧⡙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠱⠋⠉⠁⠀⠀⠀⠀⠀⣀⣈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣏⣀⡀⠀⠀⠀⠀⠁⠘⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢋⠆⣐⣀⠔⠀⠀⢀⣀⣴⣾⣿⣿⣿⠟⠋⣈⣽⣿⣿⣿⣿⣿⣿⣿⣿⢿⣦⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣬⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣣⣿⣿⣿⡟⠁⢀⣴⣿⡟⢹⣿⣿⣉⠄⣠⣼⡟⡟⠛⣶⡄⢻⣿⣿⣿⣿⣧⠩⣿⣦⡀⠀⠀⠈⣿⣿⣿⣿⣿⣯⡻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣼⢯⣿⣿⡏⢀⣴⣿⣿⡟⢀⣾⢻⡿⠋⣼⣿⣟⢰⡇⢰⣿⣷⠈⢿⣿⢻⣿⣿⣆⠸⣿⣷⡀⠀⠀⢿⣿⣿⣿⣿⣟⣿⣜⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⣼⣻⣿⣿⠋⢰⣾⣿⢿⡿⢁⡾⠁⠞⠀⡸⣿⣿⡇⣹⣿⣿⣿⣿⣆⠸⣿⠄⢻⣿⣿⣆⠹⢿⣿⡄⠀⢸⠿⣿⣿⣿⣿⣞⣿⡍⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠯⡾⠽⣽⣿⠇⢠⣿⠿⢁⣾⠗⡼⠃⠈⠀⢰⠣⣿⣿⠈⣿⣿⡿⣿⣿⣿⠀⠘⣶⠈⣿⣿⣿⣆⢸⣿⣷⠀⠈⠀⣿⣿⣿⣿⣿⣿⣿⡜⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⡿⡵⣽⢫⣻⣿⡏⢀⣾⠋⢂⣾⠏⢀⡏⠀⠀⠀⡏⢰⣿⡿⢠⣿⣿⡇⢙⣿⣿⠀⠀⢻⡇⢸⣿⣿⣿⡟⣿⡿⡆⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⡜⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⡿⢋⣸⣹⢃⡾⣽⡿⠁⣾⡏⡂⣾⠏⠀⢸⠀⠀⠀⢠⠃⢸⣿⡇⢸⣿⣿⡇⠀⣿⣿⠀⠀⠀⢇⠈⣿⣿⣿⡇⣿⡇⢹⡀⠀⢹⣿⣿⣿⢿⣿⣿⣿⣿⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣫⣥⣶⣿⠷⢎⢿⢇⣿⠁⢸⡟⠈⣼⠟⠀⠀⠈⠀⠀⠀⢸⠀⣿⣿⡇⢸⣿⡟⡇⠈⣿⣿⠀⠀⠀⠘⠀⢹⣿⣿⡇⢻⡇⣸⡅⠀⢸⣿⣿⣿⡞⣿⣿⣿⣿⡇⢻⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⠂⡈⠠⣸⡏⠀⣿⠁⢤⡏⠀⠀⠀⠇⠀⠀⠀⢸⠀⣿⣿⣧⣼⣿⡿⢷⠀⣿⡟⠀⠀⠀⠀⠀⠸⣿⣿⡇⢸⣿⣿⡇⠀⢸⣿⣿⣿⣷⢻⣿⣿⣿⣷⠘⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⡆⣿⠁⢠⡏⠀⡜⠀⠀⢀⡄⠀⠀⢠⡆⢸⠀⢸⣿⡏⢸⣿⡇⢸⡆⣿⠃⠀⠀⠀⠀⠀⠀⣿⣿⡇⢸⣿⢸⣿⠀⢸⣿⣿⣿⣿⢸⣿⣿⣿⢿⡀⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⡇⠀⢀⢱⡟⠀⣸⠁⢠⠃⠀⣰⣿⣇⠀⢠⣿⣇⢸⠀⠀⣿⡃⢸⣿⣧⠘⠷⠉⠀⠀⠀⡀⠀⠀⠀⢷⣿⡇⢸⣿⠠⣿⠀⢸⣿⣿⣿⣿⢸⣿⣿⣇⢸⠀⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⠇⠀⠸⢸⡇⠀⣿⠀⠀⠀⣰⣿⣿⣿⠀⣾⣿⣿⡘⠀⠀⣿⡇⢸⣿⣿⠀⢧⠀⠀⢀⣾⣿⡀⠀⠀⠀⢻⡇⢸⣿⠀⣿⡀⢸⣿⣿⣿⣿⠘⣿⣿⣿⢻⠃⢿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⠀⠀⢠⢸⡇⠀⣿⠀⠇⠀⠿⠿⢿⣿⡀⣿⣿⣿⣄⠇⠀⢸⡇⠈⣿⣿⡆⠀⠀⠀⡾⠿⢿⣗⡀⠀⠀⠀⠃⣼⣿⠀⣿⡇⠈⣿⣿⣿⣿⠀⣿⣿⡏⠘⣆⢸⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⡟⡀⠀⠀⢻⣇⠀⡏⠀⠀⣾⠟⠛⠓⠒⠦⠘⠭⣭⣇⣠⠀⡄⠇⠀⣿⠚⣧⠀⠠⠤⠐⠛⠻⠿⠿⠄⠀⠀⠀⣿⡿⢀⣿⡇⠀⣿⣿⣿⣇⠀⣿⣿⡇⢸⣿⢸⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⢇⡇⠀⠀⠸⣿⠀⠃⠀⠀⠁⠀⢀⠀⠀⠀⠀⠀⣾⣿⡄⠀⢀⠘⠀⢸⡄⠘⡄⠠⠂⠀⠀⠀⠀⠀⠀⠀⠀⠰⣿⡇⢸⣿⣷⠀⣿⡟⢻⡇⠀⢹⣿⡇⢸⣿⡾⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⡿⠴⠃⠀⠀⠀⣿⠀⢰⡄⠀⠀⣾⡏⠀⠀⠀⠀⠀⢺⣿⣧⠀⢸⡄⠀⢸⣧⠀⠱⠀⠆⠀⠀⠀⠀⠀⢰⣤⠀⠀⠀⡇⢸⣿⡏⠀⣿⣇⢸⡇⠀⢸⣿⡇⢸⣿⡇⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⢸⣿⡀⠘⠀⠀⣾⣿⡷⠀⠀⠀⢠⡄⢸⣿⣿⣆⠀⣷⠀⠸⠿⡆⠀⠄⣠⡤⠀⠀⣤⠀⢠⣿⡇s⠀⠈⣧⣼⣿⡇⢠⣿⡿⣿⡇⠀⢸⣿⡇⢸⠛⡇⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⡀⡀⠀⠀⠀⢸⢻⡇⠀⡆⠀⣿⣿⣷⡀⢤⣴⡆⣠⣿⣿⣿⣿⡆⢻⣧⣾⣷⣶⣶⣶⣦⡀⠀⠠⠄⢀⣾⣿⠃⡎⢺⠀⣿⣿⡇⢸⣿⠀⣿⠇⠀⣾⣿⡇⠘⠀⢁⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣀⠀⠀⠀⠀⠘⠸⣿⡀⢹⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣹⣿⣦⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣷⣿⡿⣿⠀⡇⠈⢰⠇⣿⠀⣾⣿⠀⣿⠀⠀⣿⣿⠇⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⡄⠀⢿⣷⠈⢧⠈⠻⣿⣿⠿⠿⠿⠿⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠐⣼⠀⣿⠀⣿⣿⠀⣿⠀⠀⣿⣿⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⡇⠀⢠⠀⠀⠀⠀⠘⠿⠷⠄⠀⠈⣉⡁⠀⠐⠒⠒⠛⠛⠠⠤⠤⠤⠤⠐⠛⠋⠉⢉⣉⡉⢽⡟⠛⠛⠿⢟⠀⠀⠀⢿⠀⡇⠀⢿⡟⠀⣿⠀⠀⣿⣿⢀⣲⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⡇⣷⣾⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⢿⣿⣿⣿⣷⣶⣶⣶⣶⣶⣶⣶⣦⣤⣤⣤⣤⣤⣤⣤⣤⣤⡄⠀⠀⢰⡏⠀⡇⠀⢸⡇⠀⣿⠀⢀⡿⢿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣷⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠈⡿⣟⣿⣿⣾⣿⣿⣿⣏⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⢸⡇⠀⡇⠀⢸⡇⠀⢻⠀⢸⡇⢸⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⡟⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⢀⣼⠃⠀⡇⠀⢸⣇⡆⠸⠀⢸⣇⣸⡟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣇⢿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠁⠀⠀⠀⢹⠀⠀⡇⠀⣼⢸⡇⣠⡀⠈⣿⠙⣇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣇⠘⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠈⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠁⠀⠀⠀⣀⣄⡀⣺⠀⠀⡇⠀⠏⣾⣟⠀⠀⠀⣿⠀⡏⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣄⠈⠋⠀⠀⠀⠀⠀⠀⠀⠀⢸⣷⣦⣀⠀⠀⠀⠀⠉⠻⣿⣿⣿⣿⠿⠟⠋⠉⠀⠀⠀⠀⠀⠀⠀⠈⠙⠃⡇⣿⠀⠀⡇⠀⢰⣿⣿⡤⠀⠀⢿⡶⣷⠺⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⡷⠀⡄⠀⠀⠀⠀⠆⠀⠀⢸⣿⣿⣿⣿⣷⣶⣶⣾⠗⡠⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⡇⠀⠀⠇⠀⢾⣿⣿⣿⣅⠀⢸⣿⣿⣀⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⢟⣼⢰⠃⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⢰⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⢠⢰⠀⡇⠀⢸⠀⠀⣾⣿⣿⣿⣿⠀⢸⣿⣸⡏⢻⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⠏⣾⢇⠇⢀⠀⢠⡀⠀⠀⣾⠀⠈⣿⣿⣿⣿⣿⣿⠇⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⡟⠃⠀⣀⣴⣿⣞⢧⡇⠀⠸⠀⡴⣿⣿⣿⣿⣿⡇⢸⡿⡟⡇⣸⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣟⢹⠏⡘⢀⣾⢀⣾⡇⠀⠄⣿⣧⠀⣿⣿⡿⢟⣛⣍⣾⣿⣿⡆⠀⠀⢀⣀⣠⣤⣾⡿⠛⠉⣀⣤⣾⣿⣿⣿⣿⣷⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⡇⢸⡇⡇⡇⢹⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⡚⢀⣇⣾⡏⣸⣿⣧⠀⢧⣿⣿⡆⠛⣋⢸⣿⣯⣿⣿⣿⣿⣿⣆⠀⠀⣿⠟⠉⢁⣠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⢸⢹⣿⣿⣿⣿⠇⡸⣹⡇⣇⣼⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⡿⠀⢰⣿⣏⠁⣉⣥⡄⢸⠚⣿⡏⣇⣸⣿⡞⣿⣿⣿⣿⣿⣿⣿⡟⢀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠈⡆⣌⣉⣛⠻⠠⢡⣿⡇⣈⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⡟⡀⠀⠈⣿⣿⡀⢻⢿⡇⢸⠀⣿⢇⢸⠉⣿⣷⡸⣿⣿⣿⣿⣿⠟⣰⣿⡷⣄⡀⢠⣤⣤⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⡀⠀⡇⠀⠘⡘⣿⣿⠃⢀⣶⣦⠁⣈⣛⣻⠟⠛⠻⠻⠿⣿⣿
// ⣿⣿⡿⣱⣿⡆⣶⡹⠇⣷⡐⣦⣌⠘⠀⡏⢸⡎⠀⣿⣿⣷⠙⣿⣿⣿⡏⣸⣿⣿⣗⣼⠗⣾⣿⣿⡇⢽⣿⣿⣿⣿⣿⣿⠟⢋⣴⣷⣄⠁⣀⠀⠣⠙⢁⣴⣿⣿⡟⣰⣿⣿⣿⣿⣿⣿⣷⣦⡈⢻
// ⣿⡿⢁⣿⣿⣆⢹⣿⣬⣿⣷⡹⣿⡄⠘⢀⣶⣭⡀⣿⣿⣿⣧⣈⠿⡿⠀⠈⢿⣿⣿⣿⢧⣿⣿⠟⠁⡜⣿⣿⡿⡟⣋⣔⣴⣿⣿⣿⣏⢷⣄⣿⣶⣌⡹⣿⣿⣿⣱⣿⣿⣿⣿⣿⣿⣿⠿⣿⣿⡅
// ⡿⠁⣸⣿⣿⣿⣇⢿⣿⣿⣿⣿⣿⣷⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣾⣷⠘⣿⣿⣿⣸⣯⣥⣴⣾⣿⣿⣽⣶⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⠹⣿⣿⣿⣿⣿⣿⣿⠟⣡⣾⣿⣿⣷
// oni-chan
#include <bits/stdc++.h>
typedef double dl;
typedef unsigned long ul;
typedef long long int ll;
using namespace std;
// use global variables
// try to define space before;
// bool prime[1000010];
// void SieveOfEratosthenes(int n)
// {
//     memset(prime, true, sizeof(prime));
//     for (int p = 2; p * p <= n; p++) {
//         if (prime[p] == true) {
//             for (int i = p * p; i <= n; i += p)
//                 prime[i] = false;
//         }
//     }
// long long compute_hash(string str)
// {
//   const int p = 31;
//   const int m = 1e9 + 9;
//   long long hash_value = 0;
//   long long p_pow = 1;
//   for (auto c : str)
//   {
//     hash_value = (hash_value + (c - 'a' + 1) * p_pow) % m;
//     p_pow = (p_pow * p) % m;
//   }
//   return hash_value;
// }
int n;
int m;
int arr[501][501];
bool dp[501][1024];
int record[501][1024];
void solve()
{
  cin>>n;
  cin>>m;
  for(int i=0;i<n;i++)
  {
    for(int j=0;j<m;j++)
    {
      cin>>arr[i][j];
    }
  }
  for(int i=0;i<m;i++)
  {
    dp[0][arr[0][i]]=true;
    record[0][arr[0][i]]=i;
  }
  for(int i=1;i<n;i++)
  {
    for(int j=0;j<1024;j++)
    {
      for(int k=0;k<m;k++)
      {
        dp[i][j]=dp[i-1][(j^arr[i][k])];
        if(dp[i][j])
        {
          record[i][j]=k;
        }
      }
    }
  }
  int h=-1;

  for(int i=1;i<1024;i++)
  {
    if(dp[n-1][i]==true)
    {
      h=i;
      break;
    }
  }
  if(h==-1)
  {
    cout<<"NIE"<<"\n";
  }else
  {
    cout<<"TAK"<<"\n";
    int y=n-1;
    vector<int> vtr;
    while(y>=0)
    {
      vtr.push_back(record[y][h]);
      h=h^arr[y][record[y][h]];
      y--;
    }
    for(int i=vtr.size()-1;i>=0;i--)
    {
      cout<<vtr[i]+1<<" ";
    }
  }
}
int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
  return 0;
}
// competitive programming syn